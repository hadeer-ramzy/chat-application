@model IEnumerable<MessageViewModel>
@{
    ViewData["Title"] = "ChatPrivate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="header-chat" id="chatheader">
    <i class="icon fa fa-user-o" aria-hidden="true"></i>
    <p id="@ViewData["RecieverName"]" class="name">@ViewData["RecieverName"]</p>
    <i class="icon clickable fa fa-ellipsis-h right" aria-hidden="true"></i>
</div>

@if (Model.Count() > 0)
{

    <div class="messages-chat" style="overflow-y:auto;height:50px" id="msgchat">
        @foreach (var mes in Model)
        {
            @if (mes.IsSent)
            {
                <div class="message text-only">
                    <div class="response">
                        <p class="text"> @mes.Contetnt</p>
                    </div>
                </div>
                <p class="response-time time"> @mes.date</p>
            }
            else
            {
                <div class="message text-only">
                    <p class="text">@mes.Contetnt</p>
                </div>
                <p class="time"> @mes.date</p>
            }
        }
        <div id="NewMessage"></div>
    </div>

}

<div class="footer-chat" id="footerChat">
    <i class="icon fa fa-smile-o clickable" style="font-size:25pt;" aria-hidden="true"></i>
    <input id="write-message" type="text" class="write-message" placeholder="Type your message here">
    <i id="clickS" class="icon send fa fa-paper-plane-o clickable" aria-hidden="true"></i>
</div>



@section imp {
    <script>

        var totalMsgArea = document.getElementById("totalMsgArea").clientHeight;
        var chatHeader = document.getElementById("chatheader").clientHeight;
       
        var footerHeight = document.getElementById("footerChat").clientHeight;
        var msgArea = document.getElementById("msgchat")
        msgArea.style.height =(totalMsgArea - chatHeader - footerHeight) + 'px';

        var messagesDiv = document.getElementById("msgchat");
        messagesDiv.scrollTop = messagesDiv.scrollHeight;


        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatter")
            .build();


        connection.on("NewMsg", function (content, date,SName) {
            
            $("#msgchat").append("<div class='message text-only'><p class= 'text'>" + content +"</p></div>")
            $("#msgchat").append("<p class='time>" + date + "</p>")

            
            var messagesDiv = document.getElementById("msgchat");
            messagesDiv.scrollTop = messagesDiv.scrollHeight;

        });

        connection.on("NewMsgSender", function (content, date, SName) {

            $("#msgchat").append("<div class='message text-only'><div class='response'><p class='text'>" + content + "</p></div></div>")
            $("#msgchat").append("<p class='response-time time>" + date + "</p>")

           
            var messagesDiv = document.getElementById("msgchat");
            messagesDiv.scrollTop = messagesDiv.scrollHeight;

        });

        document.getElementById("clickS").addEventListener("click", async (event) => {
            var msg = document.getElementById("write-message").value;
            try {
                document.getElementById("write-message").value = ""
                var n = document.getElementsByClassName("name")[0].innerHTML
                await connection.invoke("SendMessagePrivate", n, msg);
            }
            catch (e) {
                console.error(e.toString());
            }
            event.preventDefault();
        });



        (async () => {
            try {
                await connection.start();
            }
            catch (e) {
                console.error(e.toString());
            }
        })();
    </script>
}

